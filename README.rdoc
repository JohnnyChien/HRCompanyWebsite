
To start the server:
rails server




The App Directory:

Rails is a convention over configuration framework and as such, it automatically creates several folders under the
app directory for you whenever you create a rails project. The use of some of these folders is immediately obvious
even to people without rails experience, but the use of some other folders are a bit less clear. To help clarify and
reduce the mystery around these folders, here is a brief explanation of the folders in the app directory:

/assets:

As you might expect, this folder contains all assets for the site (images, javascript, and css)

/controllers:

Contains application controllers.

/helpers:

Contains helper modules that are meant to contain code that you want to execute in a view. Instead of clutting your
view with ruby code, you should put it here. Note: instance variables are available in these helpers.

/models:

Contains models for the application. Typically, controllers interact with these and they are used for either persisting
data or obtaining data from some data store (whether or not it's a service, a database, or a networked potato). Resist
the urge to put business logic in a model that is not explicitly related to data persistence; such logic should go in
a service object.

/presenters:

This folder is not generated by rails automatically and was added after the fact by us. Presenters are intended to act
as glorified decorators around our models. They are used to aggregate related data/models in one entity before being
given to the view. Presenters can essentially be thought of as 'view models' in that they relate data for a view that
isn't necessarily related from a backend or architectural perspective. This promotes separation of concerns and loose
coupling. http://blog.jayfields.com/2007/03/rails-presenter-pattern.html explains presenters very well.

/services:

Contains service objects for our application. This folder is not generated by rails automatically and was added after
the fact by us. Service objects are intended to contain the implementation of the user's interactions within the
application. Any business logic that doesn't explicitly have to do with persisting a model should go in here rather
than a controller or model. https://netguru.co/blog/service-objects-in-rails-will-help and
http://brewhouse.io/blog/2014/04/30/gourmet-service-objects.html are good blog posts that explain service objects well.
